@startuml

class items.Living{
    #field.Field field;
    #field.Position position;
    #boolean moveable;
    +field.Position getPosition();
    +boolean isMoveable();
    +void setMoveable(boolean on);
    +boolean move(int dx,int dy);
    +boolean swapWith(items.Living another);
    +boolean moveOrSwap(int dx,int dy);
    +boolean walkTowards(field.Position position);
    -boolean pathTo(field.Field passed, field.Position position, List<items.Living> called);
    +boolean exchangeable();
    +String toString();
}

items.Living ... field.Field
items.Living *-- field.Position

class items.Calabash{
    -int order;
    +String toString();
}

items.Living <|-- items.Calabash
field.Field o-- items.Calabash

class items.Elder{
    -items.Calabash[] calabashes;
    +void standAsSnake();
    +String toString();
}

items.Living <|-- items.Elder
items.Elder "7" o-- items.Calabash
field.Field o-- items.Elder

class items.FollowDemon{
    -int order;
    +String toString();
    +boolean exchangeable();
}

items.Living <|-- items.FollowDemon
field.Field o-- items.FollowDemon

class items.ScorpionDemon{
    -int followCount;
    -items.FollowDemon[] followDemons;
    +void standAsSwing();
    +void standAsArrow();
    +String toString();
    -boolean findPlaceForSwing();
    -boolean findPlaceForArrow();
}

items.Living <|-- items.ScorpionDemon
items.ScorpionDemon "n" ... items.FollowDemon
field.Field o-- items.ScorpionDemon

class items.SnakeDemon{
    -items.ScorpionDemon scorpionDemon;
    +void standAsArrow();
    +void standAsSwing();
    +String toString();
}

items.Living <|-- items.SnakeDemon
items.SnakeDemon ... items.ScorpionDemon
field.Field o-- items.SnakeDemon

class field.Position{
    -int x,y;
    +setPos(int x,int y);
    +int getX();
    +int getY();
    +boolean adjacentWith(field.Position another);
    +field.Position adjacentPosition(field.Direction dir);
    +boolean equals(field.Position an);
    +field.Position copy();
    +String toString();
}

class field.Direction{
    -int dir;
    +field.Direction(field.Position center,target);
    +int dx();
    +int dy();
    +void next();
}

field.Position -- field.Direction

class field.Field{
    +static int N;
    -items.Living[][] map;
    +boolean addLiving(items.Living);
    +boolean addLiving(items.Living,field.Position);
    +void removeLiving(field.Position);
    +items.Living livingAt(field.Position);
    +boolean moveLiving(items.Living,int,int);
    +boolean swapLiving(items.Living,items.Living);
    +boolean inside(field.Position);
    +void draw();
    +boolean Unreachable();
    +field.Position randomPosition();
}

class formations.Formation{
    #items.Living[] followers;
    #items.Living leader;
    +boolean embattle();
    #field.Position[] form();
}

class formations.SwingFormation{
}

formations.Formation <|-- formations.SwingFormation

class formations.ArrowFormation{

}

formations.Formation <|-- formations.ArrowFormation

items.ScorpionDemon ... formations.SwingFormation
items.ScorpionDemon ... formations.ArrowFormation
